"""
üê£ Nivel 1: B√°sicos
- N√∫meros al cuadrado
Gener√° una lista con los cuadrados de los n√∫meros del 1 al 10.
- Solo pares
Filtr√° los n√∫meros pares del 0 al 20.
- Longitudes de palabras
Dada una lista de palabras, cre√° una nueva lista con la longitud de cada palabra.
palabras = ["python", "copi", "lista", "comprehension"]
"""

squares = [a**2 for a in range(1, 11)]
# print(squares)

pairs = [a for a in range(1,21) if a%2 == 0]
# print(pairs)

palabras = ["python", "copi", "lista", "comprehension"]
length = [len(a) for a in palabras]
# print(length)

"""
üß† Nivel 2: Transformaciones
- May√∫sculas selectivas
Convert√≠ a may√∫sculas solo las palabras que tengan m√°s de 5 letras.
- Multiplicaci√≥n condicional
Multiplic√° por 2 los n√∫meros impares del 1 al 15.
- Filtrar y limpiar
Dada una lista con strings que pueden tener espacios, devolv√© una lista con los strings limpios (sin espacios) y que no est√©n vac√≠os.
sucios = ["  hola ", " ", "copi", "   ", "python  "]
"""

palabras = ["python", "copi", "lista", "comprehension", "hola", "si"]
mayusculas = [msj.upper() for msj in palabras if len(msj) > 5]
# print(mayusculas)

multi = [x*2 for x in range(1,16) if not x%2 == 0]
# print(multi)

sucios = ["  hola ", " ", "copi", "   ", "python  "]
limpio = [str.strip() for str in sucios if str.strip()]
# print(limpio)

"""
üß© Nivel 3: Combinaciones y anidamientos- Producto cartesiano
Dadas dos listas, gener√° una lista con todos los pares posibles (x, y).
colores = ["rojo", "verde"]
formas = ["c√≠rculo", "cuadrado"]
- Matrices planas
Aplan√° una matriz 2D en una sola lista.
matriz = [[1, 2], [3, 4], [5, 6]]
- Filtrar m√∫ltiplos en matriz
Dada una matriz de n√∫meros, devolv√© una lista con todos los m√∫ltiplos de 3.
"""
colores = ["rojo", "verde"]
formas = ["c√≠rculo", "cuadrado"]
pares = [(x, y) for x in formas for y in colores ]
# print(pares)

matriz = [[1, 2], [3, 4], [5, 6]]
dosd = [elemento for fila in matriz for elemento in fila]
# print(dosd)

multiplo = [elemento for fila in matriz for elemento in fila if elemento%3 == 0]
# print(multiplo)

"""
üß™ Nivel 4: Desaf√≠o Copi- Diccionario invertido con comprensi√≥n
Dado un diccionario, invert√≠ las claves y valores usando una dict comprehension.
original = {"a": 1, "b": 2, "c": 3}
- List comprehension con if-else
Gener√° una lista que diga "par" o "impar" seg√∫n el valor de cada n√∫mero del 1 al 10.
- Extraer vocales de una frase
Dada una frase, devolv√© una lista con todas las vocales que aparecen.
"""



original = {"a": 1, "b": 2, "c": 3}
convertir = {valor: clave for clave, valor in original.items()}
# original.items() te da una lista de tuplas [("a", 1), ("b", 2), ("c", 3)]
# En la comprensi√≥n, clave y valor se invierten: el nuevo diccionario tiene los valores como claves y las claves como valores.
# print(convertir)

resultado = ["par" if num % 2 == 0 else "impar" for num in range(1, 11)]
# if-else va adelante del for
# print(resultado)

frase = "Automatiz√° tu l√≥gica con Python"
vocales = [letra for letra in frase if letra.lower() in "aeiou"]
# letra.lower convierte todo a min√∫scula
# le paso las vocales para que devuelva solamente esas letras
# print(vocales)

"""________________________________________________"""

# 1. Contador de palabras √∫nicas

frase = "Python es poderoso y Python es divertido"
# .set() elimina repeticiones
# list() agrega la frase a una lista
resultado = list(set(frase.lower().split()))

print(resultado)
